package com.kanban.boardservice.services;

import com.kanban.boardservice.dtos.BoardDTO;
import com.kanban.boardservice.entities.Board;
import com.kanban.boardservice.repositories.BoardRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.modelmapper.ModelMapper;

import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class BoardServiceTest {

    @Mock
    private BoardRepository boardRepository;

    @InjectMocks
    private BoardService boardService;

    private ModelMapper modelMapper = new ModelMapper();

    @BeforeEach
    void setUp() {
        boardService = new BoardService(boardRepository);
        boardService.setModelMapper(modelMapper);
    }

    @Test
    void getAllBoards() {
        // Arrange
        Board board = new Board(1, "Test Board", "userId");
        when(boardRepository.findAllByUserId("userId")).thenReturn(Arrays.asList(board));

        // Act
        List<BoardDTO> boardDTOList = boardService.getAllBoards("userId");

        // Assert
        assertFalse(boardDTOList.isEmpty());
        assertEquals(boardDTOList.get(0).getName(), board.getName());
    }

    @Test
    void createBoard() {
        // Arrange
        Board inputBoard = new Board(); // id is not set because it's auto-generated
        inputBoard.setName("Test Board");
        inputBoard.setUserId("userId");

        Board savedBoard = new Board(); // mimic the behavior of the JPA repository
        savedBoard.setId(1); // the id that would be generated by the database
        savedBoard.setName(inputBoard.getName());
        savedBoard.setUserId(inputBoard.getUserId());

        when(boardRepository.save(any(Board.class))).thenReturn(savedBoard);

        // Act
        BoardDTO createdBoardDTO = boardService.createBoard(inputBoard);

        // Assert
        assertEquals(createdBoardDTO.getName(), savedBoard.getName());
    }


    @Test
    void deleteBoard() {
        // Arrange
        Long boardId = 1L;
        String userId = "userId";
        when(boardRepository.findByIdAndUserId(boardId, userId)).thenReturn(Optional.of(new Board()));

        // Act
        boardService.deleteBoard(boardId, userId);

        // Assert
        verify(boardRepository).deleteById(boardId);
    }
}
